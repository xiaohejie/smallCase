#include "workreManager.h"

WorkerManager::WorkerManager() {
	//1、文件不存在
	ifstream ifs;
	ifs.open(FILENAME, ios::in);	//读文件
	if (!ifs.is_open())
	{
		//cout << "文件不存在！" << endl;
		//初始化属性
		this->m_EmpNum = 0;			//初始化人数为空
		this->m_EmpArray = NULL;	//初始化数组指针
		this->m_FileIsEmpty = true;
		ifs.close();
		return;
	}
	//2、文件存在，但数据为空
	char ch;
	ifs >> ch;
	if (ifs.eof())
	{
		//文件为空
		//cout << "文件为空！" << endl;
		//初始化属性
		this->m_EmpNum = 0;			//初始化人数为空
		this->m_EmpArray = NULL;	//初始化数组指针
		this->m_FileIsEmpty = true;
		ifs.close();
		return;
	}

	//3、文件存在，并且记录着数据
	int num = this->get_EmpNum();
	//cout << "职工人数：" << num << endl;
	this->m_EmpNum = num;
	
	//开辟空间
	this->m_EmpArray = new Worker * [this->m_EmpNum];
	//将文件中的数据存到数组中
	this->init_Emp();

	////测试代码
	//for (int i = 0; i < this->m_EmpNum; i++)
	//{
	//	cout << "职工编号：" << this->m_EmpArray[i]->m_Id << "  "
	//		<< "职工姓名：" << this->m_EmpArray[i]->m_Name << "  "
	//		<< "部门编号：" << this->m_EmpArray[i]->m_DeptId << endl;
	//}
}

//展示菜单
void WorkerManager::Show_Menu() {
	cout << "********************************************" << endl;
	cout << "*********  欢迎使用职工管理系统！ **********" << endl;
	cout << "*************  0.退出管理程序  *************" << endl;
	cout << "*************  1.增加职工信息  *************" << endl;
	cout << "*************  2.显示职工信息  *************" << endl;
	cout << "*************  3.删除离职职工  *************" << endl;
	cout << "*************  4.修改职工信息  *************" << endl;
	cout << "*************  5.查找职工信息  *************" << endl;
	cout << "*************  6.按照编号排序  *************" << endl;
	cout << "*************  7.清空所有文档  *************" << endl;
	cout << "********************************************" << endl;
	cout << endl;
}

//退出系统
void WorkerManager::exitSystem() {
	cout << "欢迎下次使用！" << endl;
	system("pause");
	exit(0);
}

//添加职工
void WorkerManager::Add_Emp() {
	cout << "请输入添加职工的数量：" << endl;
	//保存用户的输入数量
	int addNum = 0;
	cin >> addNum;
	if (addNum > 0)
	{
		//进行添加
		//计算添加新空间的大小
		int newSize = this->m_EmpNum + addNum;//新空间大小 = 原来记录人数 + 新增人数
		//开辟新空间
		Worker** newSpace = new Worker * [newSize];
		//将原来空间下数据拷贝到新空间
		for (int i = 0; i < this->m_EmpNum; i++)
		{
			newSpace[i] = this->m_EmpArray[i];
		}
		//添加新数据
		for (int i = 0; i < addNum; i++)
		{
			int id;			//职工编号
			string name;	//职工姓名
			int dSelect;	//部门选择

			cout << "请输入第" << i + 1 << "个职工的编号" << endl;
			cin >> id;
			cout << "请输入第 " << i + 1 << " 个新职工姓名：" << endl;
			cin >> name;
			cout << "请选择该职工的岗位：" << endl;
			cout << "1、普通职工" << endl;
			cout << "2、经理" << endl;
			cout << "3、老板" << endl;
			cin >> dSelect;

			Worker* worker = NULL;
			switch (dSelect)
			{
			case 1:
				worker = new Employee(id , name , 1);
				break;
			case 2:
				worker = new Manager(id , name , 2);
				break;
			case 3:
				worker = new Boss(id , name, 3);
				break;
			default:
				break;
			}
			//将创建职工指针，保存到数组中
			newSpace[this->m_EmpNum + i] = worker;
 		}
		//释放原有的空间
		delete[] this->m_EmpArray;

		//更改新空间的指向
		this->m_EmpArray = newSpace;

		//更新新的职工人数
		this->m_EmpNum = newSize;

		//更新职工不为空
		this->m_FileIsEmpty = false;

		//成功添加后，将信息保存到文件中
		//提示信息
		cout << "成功添加" << addNum << "名新职工！" << endl;
		//保存数据文件
		this->save();
	}
	else {
		cout << "输入数据有误！" << endl;
	}
	
}

//保存文件内容
void WorkerManager::save() {
	ofstream ofs;
	ofs.open(FILENAME, ios::out);
	for (int i = 0; i < this->m_EmpNum; i++)
	{
		ofs << this->m_EmpArray[i]->m_Id << "  "
			<< this->m_EmpArray[i]->m_Name << "  "
			<< this->m_EmpArray[i]->m_DeptId << endl;
	}
	ofs.close();
}

//统计文件中的人数
int WorkerManager::get_EmpNum() {
	ifstream ifs;
	ifs.open(FILENAME, ios::in);//打开文件

	int id;
	string name;
	int dId;
	int num = 0;

	while (ifs >> id && ifs >> name && ifs >> dId)
	{
		//统计人数变量
		num++;
	}
	return num;
}

//初始化员工
void WorkerManager::init_Emp() {
	ifstream ifs;
	ifs.open(FILENAME, ios::in);

	int id;
	string name;
	int dId;

	int index = 0;

	while (ifs>>id && ifs>>name && ifs>>dId )
	{
		Worker* worker = NULL;
		if (dId == 1)
		{
			worker = new Employee(id, name, dId);
		}
		else if (dId == 2)
		{
			worker = new Manager(id, name, dId);
		}
		else if(dId == 3){
			worker = new Boss(id, name, dId);
		}
		this->m_EmpArray[index] = worker;
		index++;
	}
	//关闭文件
	ifs.close();
}

//展示职工列表
void WorkerManager::show_Emp() {
	//判断文件是否为空
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或者文件为空！" << endl;
	}
	else
	{
		for (int i = 0; i < this->m_EmpNum; i++)
		{
			//利用多态调用程序接口
			this->m_EmpArray[i]->showInfo();
		}
	}
	////按任意键后清屏
	//system("pause");
	//system("cls");
}

//判断职工是否存在列表中
int WorkerManager::IsExit(int id) {
	int index = -1;
	for (int i = 0; i < this->m_EmpNum; i++)
	{
		if (this->m_EmpArray[i]->m_Id == id)
		{
			index = i;
			break;
		}
	}
	return index;

}

//删除职工
void WorkerManager::del_Emp() {
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或者文件为空！" << endl;
	}
	else {
		//按照职工编号进行删除
		cout<< "请输入你要删除的职工编号：" << endl;
		int id;
		cin >> id;
		int index = IsExit(id);
		if (index == -1)
		{
			cout << "该职工编号不存在！" << endl;
		}
		else
		{
			cout << "确认是否删除（Y / N）" << endl;
			char res;
			cin >> res;
			if (res == 'Y')
			{
				for (int i = index; i < this->m_EmpNum - 1; i++)
				{
					this->m_EmpArray[i] = this->m_EmpArray[i + 1];
				}
				this->m_EmpNum--;
				cout << "删除成功！" << endl;
				//将数据同步更新到文件中
				this->save();
			}
			else {
				return;
			}
		}
	}
}

//修改职工
void WorkerManager::mod_Emp() {
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或者文件为空！" << endl;
	}
	else {
		cout << "请输入修改职工的编号：" << endl;
		int id;
		cin >> id;
		int index = IsExit(id);
		if (index == -1)
		{
			cout << "该职工编号不存在！" << endl;
		}
		else
		{
			//先将信息进行释放
			delete this->m_EmpArray[index];
			int newId = 0;
			string newName = "";
			int newDId = 0;
			cout << "查到：" << id << "号职工，请输入新职工：" << endl;
			cin >> newId;

			cout << "请输入新的姓名：" << endl;
			cin >> newName;

			cout << "请输入新的岗位：" << endl;
			cout << "1、普通职工" << endl;
			cout << "2、经理" << endl;
			cout << "3、老板" << endl;
			cin >> newDId;

			Worker* worker = NULL;
			switch (newDId)
			{
			case 1:
				worker = new Employee(newId, newName, newDId);
				break;
			case 2:
				worker = new Manager(newId, newName, newDId);
				break;
			case 3:
				worker = new Boss(newId, newName, newDId);
				break;
			default:
				break;
			}
			//更新数据到数组中
			this->m_EmpArray[index] = worker;
			cout << "修改成功！" << endl;

			//保存到文件中
			this->save();

		}
	}
}

//查找职工
void WorkerManager::find_Emp() {
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或者文件为空！" << endl;
	}
	else
	{
		cout << "请输入查找的方式(1、编号；2、姓名)：" << endl;
		int select = 0;
		cin >> select;
		if (select == 1)
		{
			int id;
			cout << "请输入查找职工的编号：" << endl;
			cin >> id;
			int ret = IsExit(id);
			if (ret == -1)
			{
				cout << "该职工编号不存在" << endl;
			}
			else
			{
				cout << "找到该职工，职工信息如下：" << endl;
				this->m_EmpArray[ret]->showInfo();
			}
		}
		else if (select == 2) {
			string name;
			cout << "请输入你要查找的员工姓名：" << endl;
			cin >> name;
			//加入是否找到信息的标志
			bool flag = false;
			for (int i = 0; i < this->m_EmpNum; i++)
			{
				if (name == this->m_EmpArray[i]->m_Name) {
					cout << "找到该职工，职工信息如下：" << endl;
					this->m_EmpArray[i]->showInfo();
					flag = true;
				}
			}
			if (flag == false)
			{
				cout << "未找到该员工！ " << endl;
			}
		}
		else
		{
			cout << "输入错误！" << endl;
		}
	}
}

//排序职工(用的是选择排序)
void WorkerManager::sort_Emp() {
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或者文件为空！" << endl;
	}
	else
	{
		cout << "请选择排序方式(1、升序；2、降序)：" << endl;
		int select = 0;
		cin >> select;

		for (int  i = 0; i < this->m_EmpNum; i++)
		{
			int minOrMax = i;
			for (int j = i + 1; j < this->m_EmpNum; j++)
			{
				if (select == 1)
				{
					if (this->m_EmpArray[minOrMax]->m_Id > this->m_EmpArray[j]->m_Id) {
						minOrMax = j;
					}

				}
				else
				{
					if (this->m_EmpArray[minOrMax]->m_Id < this->m_EmpArray[j]->m_Id) {
						minOrMax = j;
					}
				}
			}
			//判断一开始认定的最小值或者最大值是不是计算的最大或者最小，不是的话进行交换
			if (i != minOrMax)
			{
				Worker* temp = this->m_EmpArray[i];
				this->m_EmpArray[i] = this->m_EmpArray[minOrMax];
				this->m_EmpArray[minOrMax] = temp;
			}
		}
		cout << "排序成功！" << endl;
		this->save();
	}
}

//清空文件信息
void WorkerManager::clean_File() {
	cout << "请确认是否清空文件信息（Y / N）：" << endl;
	char select;
	cin >> select;
	if (select == 'Y')
	{
		//删除文件后在重新创建
		ofstream ofs(FILENAME, ios::trunc);
		ofs.close();
		//释放堆区中的数据
		if (this->m_EmpNum != NULL)
		{
			//删除堆区的每个职工对象
			for (int i = 0; i < this->m_EmpNum; i++)
			{
				delete this->m_EmpArray[i];
				this->m_EmpArray[i] = NULL;
			}
			//删除堆区数组指针
			delete[] this->m_EmpArray;
			this->m_EmpArray = NULL;
			this->m_EmpNum = 0;
			this->m_FileIsEmpty = true;
		}
		cout << "清空成功！" << endl;

	}
	else
	{
		return;
	}
}

WorkerManager::~WorkerManager() {
	if (this->m_EmpArray != NULL)
	{
		delete[] this->m_EmpArray;
		this->m_EmpArray = NULL;
	}
}